#!/usr/bin/env coffee
fs = require 'fs'
logger = require 'torch'
optimist = require 'optimist'
_ = require 'lodash'

core = require '..'


options = {}

main = ->
  parsed = optimist.options options

  # Extract the positional arguments we demand
  positional = parsed.argv._
  # Should correspond to an installed NPM module
  # named 'axiom-<moduleName>' exposing service 'serviceName'
  [moduleName, serviceName] = positional

  # TODO: Change this to instead alert specific error and print usage information
  throw new Error 'Missing required positional argument: moduleName' unless moduleName
  throw new Error 'Missing required positional argument: serviceName' unless serviceName

  # Extract the 'axiom' config object, which holds named args of the form 'axiom.<key>'
  {axiom} = parsed.argv

  # Extract the remaining args for the service
  toOmit = [
    # Special optimist properties
    '_', '$0'
    # Axiom config arguments
    'axiom'
  ]
  args = _.omit parsed.argv, toOmit

  # Initialize Axiom, load the module.
  # Default to empty config, but if a config file path is defined
  # in the unix environment, try to load it.
  config = {}
  configFile = process.env['axiom.config']
  if fs.existsSync configFile
    config = JSON.parse fs.readFileSync(configFile, {encoding: 'utf8'})
  modules = []
  modules.push moduleName

  core.init config, modules

  channel = [moduleName, serviceName].join('.')
  # Listen to any channel for info messages
  core.listen
    channel: '#'
    topic: 'info.#'
    callback: (err, envelope) ->
      {timestamp, data} = envelope
      logger.yellow "[#{timetamp}] #{data}"

  core.request channel, args, (err, results) ->
    if err
      logger.red err.stack
    else
      logger.green results


if module is require.main
  # Mock out pre-existing module
  if process.env['axiom.env'] is 'testing'
    mockery = require 'mockery'
    mockery.enable
      warnOnReplace: false,
      warnOnUnregistered: false

    mockery.registerMock 'axiom-base',
      services:
        echo: (args, next) ->
          next null, args

  main()


module.exports = main
